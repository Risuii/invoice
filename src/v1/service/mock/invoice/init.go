// Code generated by MockGen. DO NOT EDIT.
// Source: invoice/init.go
//
// Generated by this command:
//
//	mockgen -source=invoice/init.go -destination=mock/invoice/init.go
//
// Package mock_Invoices is a generated GoMock package.
package mock_Invoices

import (
	context "context"
	reflect "reflect"

	entity "github.com/Risuii/invoice/src/entity"
	contract "github.com/Risuii/invoice/src/v1/contract"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockInvoicesRepository is a mock of InvoicesRepository interface.
type MockInvoicesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvoicesRepositoryMockRecorder
}

// MockInvoicesRepositoryMockRecorder is the mock recorder for MockInvoicesRepository.
type MockInvoicesRepositoryMockRecorder struct {
	mock *MockInvoicesRepository
}

// NewMockInvoicesRepository creates a new mock instance.
func NewMockInvoicesRepository(ctrl *gomock.Controller) *MockInvoicesRepository {
	mock := &MockInvoicesRepository{ctrl: ctrl}
	mock.recorder = &MockInvoicesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoicesRepository) EXPECT() *MockInvoicesRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInvoicesRepository) Create(ctx context.Context, data *entity.Invoices) (contract.InvoiceResponseDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(contract.InvoiceResponseDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInvoicesRepositoryMockRecorder) Create(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInvoicesRepository)(nil).Create), ctx, data)
}

// Get mocks base method.
func (m *MockInvoicesRepository) Get(ctx context.Context, id string) (entity.Invoices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(entity.Invoices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInvoicesRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInvoicesRepository)(nil).Get), ctx, id)
}

// GetInvoicesCount mocks base method.
func (m *MockInvoicesRepository) GetInvoicesCount(ctx context.Context, param contract.GetListParam) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoicesCount", ctx, param)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoicesCount indicates an expected call of GetInvoicesCount.
func (mr *MockInvoicesRepositoryMockRecorder) GetInvoicesCount(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoicesCount", reflect.TypeOf((*MockInvoicesRepository)(nil).GetInvoicesCount), ctx, param)
}

// GetLatestInvoiceID mocks base method.
func (m *MockInvoicesRepository) GetLatestInvoiceID(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestInvoiceID", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestInvoiceID indicates an expected call of GetLatestInvoiceID.
func (mr *MockInvoicesRepositoryMockRecorder) GetLatestInvoiceID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestInvoiceID", reflect.TypeOf((*MockInvoicesRepository)(nil).GetLatestInvoiceID), ctx)
}

// GetList mocks base method.
func (m *MockInvoicesRepository) GetList(ctx context.Context, params contract.GetListParam) ([]*entity.Invoices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, params)
	ret0, _ := ret[0].([]*entity.Invoices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockInvoicesRepositoryMockRecorder) GetList(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockInvoicesRepository)(nil).GetList), ctx, params)
}

// Update mocks base method.
func (m *MockInvoicesRepository) Update(ctx context.Context, data *entity.Invoices) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockInvoicesRepositoryMockRecorder) Update(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInvoicesRepository)(nil).Update), ctx, data)
}

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerRepository) Create(ctx context.Context, data *entity.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCustomerRepositoryMockRecorder) Create(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerRepository)(nil).Create), ctx, data)
}

// Get mocks base method.
func (m *MockCustomerRepository) Get(ctx context.Context, id string) (entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCustomerRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomerRepository)(nil).Get), ctx, id)
}

// Update mocks base method.
func (m *MockCustomerRepository) Update(ctx context.Context, data *entity.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCustomerRepositoryMockRecorder) Update(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerRepository)(nil).Update), ctx, data)
}

// MockItemRepository is a mock of ItemRepository interface.
type MockItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryMockRecorder
}

// MockItemRepositoryMockRecorder is the mock recorder for MockItemRepository.
type MockItemRepositoryMockRecorder struct {
	mock *MockItemRepository
}

// NewMockItemRepository creates a new mock instance.
func NewMockItemRepository(ctrl *gomock.Controller) *MockItemRepository {
	mock := &MockItemRepository{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepository) EXPECT() *MockItemRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemRepository) Create(ctx context.Context, data []*entity.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockItemRepositoryMockRecorder) Create(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemRepository)(nil).Create), ctx, data)
}

// Delete mocks base method.
func (m *MockItemRepository) Delete(ctx context.Context, id []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockItemRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockItemRepository)(nil).Delete), ctx, id)
}

// GetByInvoiceID mocks base method.
func (m *MockItemRepository) GetByInvoiceID(ctx context.Context, invID string) ([]*entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByInvoiceID", ctx, invID)
	ret0, _ := ret[0].([]*entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByInvoiceID indicates an expected call of GetByInvoiceID.
func (mr *MockItemRepositoryMockRecorder) GetByInvoiceID(ctx, invID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByInvoiceID", reflect.TypeOf((*MockItemRepository)(nil).GetByInvoiceID), ctx, invID)
}

// Update mocks base method.
func (m *MockItemRepository) Update(ctx context.Context, data []*entity.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockItemRepositoryMockRecorder) Update(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemRepository)(nil).Update), ctx, data)
}
